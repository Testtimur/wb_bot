import asyncio
import aiohttp
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler
)
import json
import os
from threading import Thread
from flask import Flask

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Render
flask_app = Flask(__name__)


@flask_app.route('/')
def home():
    return "ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! ‚úÖ"


@flask_app.route('/health')
def health():
    return {"status": "ok", "bot": "running"}


def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    port = int(os.environ.get('PORT', 10000))
    flask_app.run(host='0.0.0.0', port=port)


# –°–æ—Å—Ç–æ—è–Ω–∏—è
WAITING_FOR_API_KEY = 1

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = 'bot_data.json'
user_data = {}


def load_user_data():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞"""
    global user_data
    try:
        if os.path.exists(DATA_FILE):
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                for user_id, info in data.items():
                    info['known_orders'] = set(info.get('known_orders', []))
                user_data = data
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(user_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        user_data = {}


def save_user_data():
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª"""
    try:
        data_to_save = {}
        for user_id, info in user_data.items():
            data_to_save[user_id] = info.copy()
            data_to_save[user_id]['known_orders'] = list(info.get('known_orders', set()))

        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data_to_save, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")


async def get_wb_orders(api_key: str, limit: int = 1000, next_cursor: int = 0):
    """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –∏–∑ WB API"""
    url = "https://marketplace-api.wildberries.ru/api/v3/orders"
    headers = {
        "Authorization": api_key,
        "Content-Type": "application/json"
    }
    params = {
        "limit": limit,
        "next": next_cursor
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers, params=params, timeout=30) as response:
                if response.status == 200:
                    data = await response.json()
                    return data.get('orders', []), data.get('next', 0)
                elif response.status == 401:
                    print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –Ω–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á")
                    return None, None
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ API: —Å—Ç–∞—Ç—É—Å {response.status}")
                    return None, None
    except asyncio.TimeoutError:
        print("‚è± –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
        return None, None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None, None


def format_order(order: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    created = datetime.fromisoformat(order['createdAt'].replace('Z', '+00:00'))
    price = order['convertedPrice'] / 100

    msg = f"üÜï <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n\n"
    msg += f"üÜî ID: <code>{order['id']}</code>\n"
    msg += f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: <b>{order['article']}</b>\n"
    msg += f"üí∞ –¶–µ–Ω–∞: <b>{price:.2f} ‚ÇΩ</b>\n"
    msg += f"üìÖ –°–æ–∑–¥–∞–Ω: {created.strftime('%d.%m.%Y %H:%M')}\n"
    msg += f"üè¢ –°–∫–ª–∞–¥: {', '.join(order.get('offices', ['–ù–µ —É–∫–∞–∑–∞–Ω']))}\n"
    msg += f"üìã Supply ID: <code>{order.get('supplyId', 'N/A')}</code>\n"

    if order.get('comment'):
        msg += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order['comment']}\n"

    return msg


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user_id = update.effective_user.id

    if user_id not in user_data:
        user_data[user_id] = {
            'api_key': None,
            'known_orders': set(),
            'monitoring': False
        }

    keyboard = [
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å API", callback_data='setup_api')],
        [InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data='start_monitor')],
        [InlineKeyboardButton("‚è∏ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data='stop_monitor')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if user_data[user_id].get('monitoring') else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    api_status = "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if user_data[user_id].get('api_key') else "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

    text = (
        f"ü§ñ <b>–ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–∫–∞–∑–æ–≤ Wildberries</b>\n\n"
        f"API –∫–ª—é—á: {api_status}\n"
        f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {status}\n\n"
        f"üìç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç\n"
        f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö"
    )

    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='HTML')


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id

    if user_id not in user_data:
        user_data[user_id] = {
            'api_key': None,
            'known_orders': set(),
            'monitoring': False
        }

    if query.data == 'setup_api':
        await query.edit_message_text(
            "üîë <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–∞</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à API –∫–ª—é—á –æ—Ç Wildberries\n\n"
            "–ì–¥–µ –≤–∑—è—Ç—å:\n"
            "1. –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ WB\n"
            "2. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –î–æ—Å—Ç—É–ø –∫ API\n"
            "3. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
            parse_mode='HTML'
        )
        return WAITING_FOR_API_KEY

    elif query.data == 'start_monitor':
        if not user_data[user_id].get('api_key'):
            await query.edit_message_text(
                "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á!\n"
                "–ù–∞–∂–º–∏—Ç–µ /start"
            )
            return

        user_data[user_id]['monitoring'] = True
        save_user_data()

        await query.edit_message_text(
            "‚úÖ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
            "üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –∑–∞–∫–∞–∑—ã –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç\n"
            "üîî –ë—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö",
            parse_mode='HTML'
        )

    elif query.data == 'stop_monitor':
        user_data[user_id]['monitoring'] = False
        save_user_data()

        await query.edit_message_text(
            "‚è∏ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–Ω–æ–≤–∞",
            parse_mode='HTML'
        )

    elif query.data == 'stats':
        if not user_data[user_id].get('api_key'):
            await query.edit_message_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á!")
            return

        await query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")

        orders, _ = await get_wb_orders(user_data[user_id]['api_key'], limit=1000)

        if orders is None:
            await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            return

        if not orders:
            await query.message.reply_text("üì≠ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
            return

        total_price = sum(o['convertedPrice'] for o in orders) / 100
        avg_price = total_price / len(orders) if orders else 0

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º
        articles = {}
        for order in orders:
            art = order.get('article', 'N/A')
            articles[art] = articles.get(art, 0) + 1

        top_articles = sorted(articles.items(), key=lambda x: x[1], reverse=True)[:5]

        stats_text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤</b>\n\n"
            f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: <b>{len(orders)}</b>\n"
            f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: <b>{total_price:.2f} ‚ÇΩ</b>\n"
            f"üìà –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: <b>{avg_price:.2f} ‚ÇΩ</b>\n\n"
            f"üèÜ <b>–¢–æ–ø –∞—Ä—Ç–∏–∫—É–ª–æ–≤:</b>\n"
        )

        for i, (art, count) in enumerate(top_articles, 1):
            stats_text += f"{i}. {art}: {count} —à—Ç.\n"

        await query.message.reply_text(stats_text, parse_mode='HTML')


async def receive_api_key(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞"""
    user_id = update.effective_user.id
    api_key = update.message.text.strip()

    await update.message.reply_text("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é API –∫–ª—é—á...")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞
    orders, _ = await get_wb_orders(api_key, limit=10)

    if orders is None:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ /cancel"
        )
        return WAITING_FOR_API_KEY

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    user_data[user_id]['api_key'] = api_key
    user_data[user_id]['known_orders'] = set(o['id'] for o in orders)
    save_user_data()

    await update.message.reply_text(
        f"‚úÖ <b>API –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n\n"
        f"üì¶ –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}\n\n"
        f"–¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ /start",
        parse_mode='HTML'
    )

    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞"""
    await update.message.reply_text(
        "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
    )
    return ConversationHandler.END


async def check_orders_job(context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤"""
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤... {datetime.now().strftime('%H:%M:%S')}")

    for user_id, data in list(user_data.items()):
        if not data.get('monitoring') or not data.get('api_key'):
            continue

        try:
            orders, _ = await get_wb_orders(data['api_key'], limit=1000)

            if orders is None:
                continue

            current_ids = set(o['id'] for o in orders)
            known_ids = data.get('known_orders', set())

            new_ids = current_ids - known_ids

            if new_ids:
                print(f"üÜï –ù–∞–π–¥–µ–Ω–æ {len(new_ids)} –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

                for order in orders:
                    if order['id'] in new_ids:
                        try:
                            await context.bot.send_message(
                                chat_id=user_id,
                                text=format_order(order),
                                parse_mode='HTML'
                            )
                            await asyncio.sleep(0.5)
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

                data['known_orders'] = current_ids
                save_user_data()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    load_user_data()

    # –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', "8389924474:AAGthpjg_sKQ5qMydMV4F40nTbK1Pxw0Gxs")

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–∞ WB
    wb_api_key = os.getenv('WB_API_KEY')
    if wb_api_key:
        if '1' not in user_data:
            user_data['1'] = {
                'api_key': wb_api_key,
                'known_orders': set(),
                'monitoring': True
            }
            save_user_data()
            print("‚úÖ API –∫–ª—é—á WB –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    # –°–æ–∑–¥–∞–µ–º Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    telegram_app = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler, pattern='^setup_api$')],
        states={
            WAITING_FOR_API_KEY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_api_key)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        per_message=False
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    telegram_app.add_handler(CommandHandler('start', start_command))
    telegram_app.add_handler(conv_handler)
    telegram_app.add_handler(CallbackQueryHandler(button_handler))

    # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    job_queue = telegram_app.job_queue
    if job_queue:
        job_queue.run_repeating(check_orders_job, interval=600, first=10)
        print("‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç)")
    else:
        print("‚ö†Ô∏è Job queue –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
    flask_thread = Thread(target=run_flask, daemon=True)
    flask_thread.start()
    print(f"üåê Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {os.environ.get('PORT', 10000)}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    telegram_app.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()